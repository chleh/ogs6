#!/usr/bin/python

# prevent broken pipe error
from signal import signal, SIGPIPE, SIG_DFL
signal(SIGPIPE,SIG_DFL)

from print23 import print_
import os
import sys
import xml.etree.cElementTree as ET
import json

if len(sys.argv) != 3:
    sys.stderr.write("Usage:\n")
    sys.stderr.write("{0} DOCDIR DOCAUXDIR\n".format(sys.argv[0]))
    sys.exit(1)

docdir    = sys.argv[1]
docauxdir = sys.argv[2]

docdir    = os.path.abspath(docdir)
docauxdir = os.path.abspath(docauxdir)
outdir    = os.path.join(docauxdir, "dox", "CTestProjectFiles")

tag_path_expansion_table = {
    "boundary_condition": "prj.process_variables.process_variable.boundary_conditions.boundary_condition",
    "linear_solver":      "prj.linear_solvers.linear_solver",
    "process":            "prj.processes.process",
    "parameter":          "prj.parameters.parameter",
    # "prj": "",
}

tag_path_expansion_table_inv = {}
for k,v in tag_path_expansion_table.items():
    tag_path_expansion_table_inv[v] = k

def dict_of_list_append(dict_, key, value):
    if key in dict_:
        dict_[key].append(value)
    else:
        dict_[key] = [value]

map_path_info = {}

# read parameter cache (generated by normalize-param-cache.py)
with open(os.path.join(docauxdir, "documented-parameters-cache.txt")) as fh:
    for line in fh:
        line = line.strip().split("@@@")
        if line[0] == "OK":
            tagpath = line[3]

            # assume parent tags are also documented
            tagpath_parts = tagpath.split(".")[:-1]
            while tagpath_parts:
                k = (".".join(tagpath_parts), True)
                if k not in map_path_info:
                    map_path_info[k] = []
                tagpath_parts.pop()

            method = line[-1]
            is_tag = method.find("Attribute") == -1
            k = (tagpath, is_tag)
            dict_of_list_append(map_path_info, k, line)
            # print_(tagpath, is_tag)

if False:
    documented_tags_attrs = sorted(map_path_info.keys())
    for ta in documented_tags_attrs:
        print(ta)

class node:
    def __init__(self, name, children=None, attrs=None, is_case=False):
        self.name = name
        self.children = children if children is not None else []
        self.attrs = attrs if attrs is not None else []
        self.is_case = is_case
    def __repr__(self):
        chs = ",".join(c.name for c in self.children)
        ats = ",".join(a.name for a in self.attrs)
        return "<{}  children={} attrs={} is_case={}>".format(self.name, chs, ats, self.is_case)

tree = node("")
map_path_node = { "": tree }

try:
    for (dirpath, _, filenames) in os.walk(docdir):
        reldirpath = dirpath[len(docdir)+1:]

        parentpath = ".".join(reldirpath.split(os.sep)[:-1])
        parentnode = map_path_node[parentpath]
        parentnode.children.append(node(os.path.basename(dirpath)))
        # print "parent dir is", parentnode.name

        # now parentnode and -path are the current directory!
        parentnode = parentnode.children[-1]
        parentpath = reldirpath.replace(os.sep, ".")
        map_path_node[parentpath] = parentnode

        # print "parentpath is", parentpath

        for f in filenames:
            if not f.endswith(".md"): continue
            istag = True
            tagname = f[2:-len(".md")]

            if f.startswith("i_"):
                tagpath = reldirpath
                continue
            elif f.startswith("c_"):
                tagpath = reldirpath
                tagpath = tagpath.replace(os.sep, ".")
                map_path_node[tagpath].is_case = True
                continue
            elif f.startswith("t_"):
                tagpath = os.path.join(reldirpath, tagname)
            elif f.startswith("a_"):
                tagpath = os.path.join(reldirpath, tagname)
                istag = False

            tagpath = tagpath.replace(os.sep, ".")
            if not tagpath:
                continue
                tagpath = "prj"
            assert (tagpath, istag) in map_path_info

            if istag:
                parentnode.children.append(node(tagname))
                map_path_node[tagpath] = parentnode.children[-1]
            else:
                parentnode.attrs.append(node(tagname))
except KeyError:
    raise

# for k in sorted(map_path_node.keys()):
#     print "k", k

if True:
    for k, v in tag_path_expansion_table.items():
        old_node = map_path_node[k]
        new_node = map_path_node[v]
        new_node.children.extend(old_node.children)
        new_node.attrs.extend(old_node.attrs)
        old_node.children = []
        old_node.attrs = []
        i = k.rfind(".")
        if i == -1:
            k_parent_node = map_path_node[""]
        else:
            k_parent_node = map_path_node[k[:i]]
        for i, c in enumerate(k_parent_node.children):
            if c.name == k:
                k_parent_node.children.pop(i)
                break


# print "tree:", tree
#
# for k, v in sorted(map_path_node.items()):
#     print k, v

def print_tree(node, level=0, path=""):
    if path in tag_path_expansion_table_inv:
        path = tag_path_expansion_table_inv[path]

    if node.children:
        print("{}<{}{}{}>".format("  "*level, node.name,
            " attrs..." if node.attrs else "",
            " is case" if node.is_case else ""))
        for c in node.children:
            print_tree(c, level+1, (path + "." + node.name).lstrip("."))
        print("{}</{}>".format("  "*level, node.name))
    else:
        try:
            p = (path + "." + node.name).lstrip(".")
            dt = " data type=" + map_path_info[(p, True)][0][5]
        except:
            dt = " data type is unknown!"
            #raise
        print("{}<{}{}{}{} />".format("  "*level, node.name,
            " attrs..." if node.attrs else "",
            " is case" if node.is_case else "",
            dt))

print_tree(map_path_node["prj"])
#print_tree(tree)


# print(map_path_info[("boundary_condition.type", True)])

sys.exit()

for (dirpath, dirnames, filenames) in os.walk(datadir, topdown=False):
    reldirpath = os.path.relpath(dirpath, datadir)
    outdirpath = os.path.join(outdir, reldirpath)
    print_(">", reldirpath)

    subpages = []

    for fn in filenames:
        filepath = os.path.join(dirpath, fn)
        relfilepath = os.path.relpath(filepath, datadir)
        pagename = "ogs_ctest_prj__" + relfilepath.replace("/", "__").replace(".", "__")

        if fn.endswith(".prj"):
            outdoxfile = os.path.join(outdirpath, fn + ".dox")
            dirs_with_prj_files.add(reldirpath)

            subpages.append(pagename)

            if not os.path.exists(outdirpath):
                os.makedirs(outdirpath)

            with open(outdoxfile, "w") as fh:
                fh.write(r"""/*! \page %s %s

<tt>
""" % (pagename, fn))

                xmlroot = ET.parse(filepath).getroot()
                print_tags(xmlroot, 0, "prj", fh, None, 0, relfilepath)

                fh.write(r"""</tt>
*/
""")
